--
-- This file is to check the effect of DDL statements on the catalog version
-- stored in pg_yb_catalog_table. In particular, not all DDL query causes
-- changes in catalog. For example, a grant statement may not really change
-- anything if the same privileges are already granted. In such cases it is
-- benefitial to avoid catalog version increment to prevent catalog cache
-- update which may overload yb-master if there are a large number of active
-- Postgres connections.
--
--
-- Display the initial catalog version.
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               2 |                     1
(1 row)

-- The next CREATE ROLE will increment current_version.
CREATE ROLE cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               3 |                     1
(1 row)

-- The next CREATE ROLE fails and should not cause any catalog version change.
CREATE ROLE cv_test_role;
ERROR:  role "cv_test_role" already exists
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               3 |                     1
(1 row)

-- The next CREATE DATABASE will increment current_version.
CREATE DATABASE cv_test_database;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               3 |                     1
(1 row)

-- The next GRANT CONNECT will increment current_version.
GRANT CONNECT ON DATABASE cv_test_database TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               4 |                     1
(1 row)

-- The next GRANT CONNECT should not cause any catalog version change.
GRANT CONNECT ON DATABASE cv_test_database TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               4 |                     1
(1 row)

-- The next REVOKE CONNECT is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE CONNECT ON DATABASE cv_test_database from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               5 |                     5
(1 row)

-- The next REVOKE CONNECT should not cause any catalog version change.
REVOKE CONNECT ON DATABASE cv_test_database from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               5 |                     5
(1 row)

-- The next CREATE TABLE will increment current_version.
CREATE TABLE cv_test_table(id int);
-- The next GRANT SELECT will increment current_version.
GRANT SELECT ON cv_test_table TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               6 |                     5
(1 row)

-- The next GRANT SELECT should not cause any catalog version change.
GRANT SELECT ON cv_test_table TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               6 |                     5
(1 row)

-- The next REVOKE SELECT is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE SELECT ON cv_test_table FROM cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               7 |                     7
(1 row)

-- The next REVOKE SELECT should not cause any catalog version change.
REVOKE SELECT ON cv_test_table FROM cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               7 |                     7
(1 row)

-- The next CREATE FOREIGN DATA WRAPPER will increment current_version.
CREATE FOREIGN DATA WRAPPER cv_test_fdw_wrapper;
-- The next GRANT USAGE will increment current_version.
GRANT USAGE ON FOREIGN DATA WRAPPER cv_test_fdw_wrapper TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               9 |                     7
(1 row)

-- The next GRANT USAGE should not cause any catalog version change.
GRANT USAGE ON FOREIGN DATA WRAPPER cv_test_fdw_wrapper TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |               9 |                     7
(1 row)

-- The next REVOKE USAGE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE USAGE ON FOREIGN DATA WRAPPER cv_test_fdw_wrapper FROM cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              10 |                    10
(1 row)

-- The next REVOKE USAGE should not cause any catalog version change.
REVOKE USAGE ON FOREIGN DATA WRAPPER cv_test_fdw_wrapper FROM cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              10 |                    10
(1 row)

-- The next CREATE SERVER will increment current_version.
CREATE SERVER cv_test_fdw_server FOREIGN DATA WRAPPER cv_test_fdw_wrapper;
-- The next GRANT USAGE will increment current_version.
GRANT USAGE ON FOREIGN SERVER cv_test_fdw_server TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              12 |                    10
(1 row)

-- The next GRANT USAGE should not cause any catalog version change.
GRANT USAGE ON FOREIGN SERVER cv_test_fdw_server TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              12 |                    10
(1 row)

-- The next REVOKE USAGE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE USAGE ON FOREIGN SERVER cv_test_fdw_server FROM cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              13 |                    13
(1 row)

-- The next REVOKE USAGE should not cause any catalog version change.
REVOKE USAGE ON FOREIGN SERVER cv_test_fdw_server FROM cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              13 |                    13
(1 row)

-- The next CREATE FUNCTION will increment current_version.
CREATE FUNCTION cv_test_function() RETURNS int AS $$ SELECT 1 $$ LANGUAGE sql;
-- The next GRANT EXECUTE will increment current_version.
GRANT EXECUTE ON FUNCTION cv_test_function TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              14 |                    13
(1 row)

-- The next GRANT EXECUTE should not cause any catalog version change.
GRANT EXECUTE ON FUNCTION cv_test_function TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              14 |                    13
(1 row)

-- The next REVOKE EXECUTE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE EXECUTE ON FUNCTION cv_test_function from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              15 |                    15
(1 row)

-- The next REVOKE EXECUTE should not cause any catalog version change.
REVOKE EXECUTE ON FUNCTION cv_test_function from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              15 |                    15
(1 row)

-- The next GRANT USAGE will increment current_version.
GRANT USAGE ON LANGUAGE sql TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              16 |                    15
(1 row)

-- The next GRANT USAGE should not cause any catalog version change.
GRANT USAGE ON LANGUAGE sql TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              16 |                    15
(1 row)

-- The next REVOKE USAGE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE USAGE ON LANGUAGE sql from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              17 |                    17
(1 row)

-- The next REVOKE USAGE should not cause any catalog version change.
REVOKE USAGE ON LANGUAGE sql from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              17 |                    17
(1 row)

SET yb_non_ddl_txn_for_sys_tables_allowed=1;
SELECT lo_create(1001);
 lo_create
-----------
      1001
(1 row)

SET yb_non_ddl_txn_for_sys_tables_allowed=0;
-- The next GRANT SELECT will increment current_version.
GRANT SELECT ON LARGE OBJECT 1001 TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              18 |                    17
(1 row)

-- The next GRANT SELECT should not cause any catalog version change.
GRANT SELECT ON LARGE OBJECT 1001 TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              18 |                    17
(1 row)

-- The next REVOKE SELECT is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE SELECT ON LARGE OBJECT 1001 from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              19 |                    19
(1 row)

-- The next REVOKE SELECT should not cause any catalog version change.
REVOKE SELECT ON LARGE OBJECT 1001 from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              19 |                    19
(1 row)

-- The next GRANT USAGE will increment current_version.
GRANT USAGE ON SCHEMA public TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              20 |                    19
(1 row)

-- The next GRANT USAGE should not cause any catalog version change.
GRANT USAGE ON SCHEMA public TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              20 |                    19
(1 row)

-- The next REVOKE USAGE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE USAGE ON SCHEMA public from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              21 |                    21
(1 row)

-- The next REVOKE USAGE should not cause any catalog version change.
REVOKE USAGE ON SCHEMA public from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              21 |                    21
(1 row)

-- The next CREATE TABLEGROUP will increment current_version.
CREATE TABLEGROUP cv_test_tablegroup;
-- The next GRANT CREATE will increment current_version.
GRANT CREATE ON TABLEGROUP cv_test_tablegroup TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              22 |                    21
(1 row)

-- The next GRANT CREATE should not cause any catalog version change.
GRANT CREATE ON TABLEGROUP cv_test_tablegroup TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              22 |                    21
(1 row)

-- The next REVOKE CREATE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE CREATE ON TABLEGROUP cv_test_tablegroup from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              23 |                    23
(1 row)

-- The next REVOKE CREATE should not cause any catalog version change.
REVOKE CREATE ON TABLEGROUP cv_test_tablegroup from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              23 |                    23
(1 row)

-- The next CREATE TABLESPACE will increment current_version.
CREATE TABLESPACE cv_test_tablespace WITH (replica_placement=
  '{"num_replicas":1,"placement_blocks":[{"cloud":"c1","region":"r1","zone":"z1","min_num_replicas":1}]}');
-- The next GRANT CREATE will increment current_version.
GRANT CREATE ON TABLESPACE cv_test_tablespace TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              24 |                    23
(1 row)

-- The next GRANT CREATE should not cause any catalog version change.
GRANT CREATE ON TABLESPACE cv_test_tablespace TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              24 |                    23
(1 row)

-- The next REVOKE CREATE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE CREATE ON TABLESPACE cv_test_tablespace from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              25 |                    25
(1 row)

-- The next REVOKE CREATE should not cause any catalog version change.
REVOKE CREATE ON TABLESPACE cv_test_tablespace from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              25 |                    25
(1 row)

-- The next CREATE TYPE will increment current_version.
CREATE TYPE cv_test_type AS (a int, b text);
-- The next GRANT USAGE will increment current_version.
GRANT USAGE ON TYPE cv_test_type TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              27 |                    25
(1 row)

-- The next GRANT USAGE should not cause any catalog version change.
GRANT USAGE ON TYPE cv_test_type TO cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              27 |                    25
(1 row)

-- The next REVOKE USAGE is a "breaking" catalog change. It will increment
-- both current_version and last_breaking_version.
REVOKE USAGE ON TYPE cv_test_type from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              28 |                    28
(1 row)

-- The next REVOKE USAGE should not cause any catalog version change.
REVOKE USAGE ON TYPE cv_test_type from cv_test_role;
SELECT * FROM pg_yb_catalog_version;
 db_oid | current_version | last_breaking_version
--------+-----------------+-----------------------
      1 |              28 |                    28
(1 row)
